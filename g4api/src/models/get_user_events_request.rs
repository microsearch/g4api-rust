/*
 * G4 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetUserEventsRequest {
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
    #[serde(rename = "stop", skip_serializing_if = "Option::is_none")]
    pub stop: Option<String>,
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<crate::models::UserEventType>,
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "appName", skip_serializing_if = "Option::is_none")]
    pub app_name: Option<String>,
    #[serde(rename = "skip", skip_serializing_if = "Option::is_none")]
    pub skip: Option<i32>,
    #[serde(rename = "take", skip_serializing_if = "Option::is_none")]
    pub take: Option<i32>,
}

impl GetUserEventsRequest {
    pub fn new() -> GetUserEventsRequest {
        GetUserEventsRequest {
            user_id: None,
            start: None,
            stop: None,
            event_type: None,
            host: None,
            app_name: None,
            skip: None,
            take: None,
        }
    }
}
